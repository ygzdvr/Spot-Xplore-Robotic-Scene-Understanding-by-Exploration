# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api import point_cloud_pb2 as bosdyn_dot_api_dot_point__cloud__pb2


class PointCloudServiceStub(object):
    """The point cloud service provides access to one or more point cloud sources, for example
    from a lidar. It supports querying the list of available sources provided by the service
    and it supports requesting the latest point cloud data for each source by name.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListPointCloudSources = channel.unary_unary(
                '/bosdyn.api.PointCloudService/ListPointCloudSources',
                request_serializer=bosdyn_dot_api_dot_point__cloud__pb2.ListPointCloudSourcesRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_point__cloud__pb2.ListPointCloudSourcesResponse.FromString,
                )
        self.GetPointCloud = channel.unary_unary(
                '/bosdyn.api.PointCloudService/GetPointCloud',
                request_serializer=bosdyn_dot_api_dot_point__cloud__pb2.GetPointCloudRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_point__cloud__pb2.GetPointCloudResponse.FromString,
                )


class PointCloudServiceServicer(object):
    """The point cloud service provides access to one or more point cloud sources, for example
    from a lidar. It supports querying the list of available sources provided by the service
    and it supports requesting the latest point cloud data for each source by name.
    """

    def ListPointCloudSources(self, request, context):
        """Obtain the list of PointCloudSources for this given service.
        Note that there may be multiple PointCloudServices running, each with their own set of
        sources The name field keys access to individual point clouds when calling GetPointCloud.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPointCloud(self, request, context):
        """Request point clouds by source name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PointCloudServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListPointCloudSources': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPointCloudSources,
                    request_deserializer=bosdyn_dot_api_dot_point__cloud__pb2.ListPointCloudSourcesRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_point__cloud__pb2.ListPointCloudSourcesResponse.SerializeToString,
            ),
            'GetPointCloud': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPointCloud,
                    request_deserializer=bosdyn_dot_api_dot_point__cloud__pb2.GetPointCloudRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_point__cloud__pb2.GetPointCloudResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.PointCloudService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PointCloudService(object):
    """The point cloud service provides access to one or more point cloud sources, for example
    from a lidar. It supports querying the list of available sources provided by the service
    and it supports requesting the latest point cloud data for each source by name.
    """

    @staticmethod
    def ListPointCloudSources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.PointCloudService/ListPointCloudSources',
            bosdyn_dot_api_dot_point__cloud__pb2.ListPointCloudSourcesRequest.SerializeToString,
            bosdyn_dot_api_dot_point__cloud__pb2.ListPointCloudSourcesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPointCloud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.PointCloudService/GetPointCloud',
            bosdyn_dot_api_dot_point__cloud__pb2.GetPointCloudRequest.SerializeToString,
            bosdyn_dot_api_dot_point__cloud__pb2.GetPointCloudResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
