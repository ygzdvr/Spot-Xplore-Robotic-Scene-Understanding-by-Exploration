# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api.log_status import log_status_pb2 as bosdyn_dot_api_dot_log__status_dot_log__status__pb2


class LogStatusServiceStub(object):
    """The LogStatusService provides clients the ability to
    - Retrieve log status by id
    - Access a collection of active logs
    - Start and stop retro logs
    - Start, extend and stop experiment logs
    - Terminate logs before their expiration time
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLogStatus = channel.unary_unary(
                '/bosdyn.api.log_status.LogStatusService/GetLogStatus',
                request_serializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.GetLogStatusRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.GetLogStatusResponse.FromString,
                )
        self.GetActiveLogStatuses = channel.unary_unary(
                '/bosdyn.api.log_status.LogStatusService/GetActiveLogStatuses',
                request_serializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.GetActiveLogStatusesRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.GetActiveLogStatusesResponse.FromString,
                )
        self.StartRetroLog = channel.unary_unary(
                '/bosdyn.api.log_status.LogStatusService/StartRetroLog',
                request_serializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.StartRetroLogRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.StartRetroLogResponse.FromString,
                )
        self.StartExperimentLog = channel.unary_unary(
                '/bosdyn.api.log_status.LogStatusService/StartExperimentLog',
                request_serializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.StartExperimentLogRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.StartExperimentLogResponse.FromString,
                )
        self.UpdateExperimentLog = channel.unary_unary(
                '/bosdyn.api.log_status.LogStatusService/UpdateExperimentLog',
                request_serializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.UpdateExperimentLogRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.UpdateExperimentLogResponse.FromString,
                )
        self.TerminateLog = channel.unary_unary(
                '/bosdyn.api.log_status.LogStatusService/TerminateLog',
                request_serializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.TerminateLogRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.TerminateLogResponse.FromString,
                )


class LogStatusServiceServicer(object):
    """The LogStatusService provides clients the ability to
    - Retrieve log status by id
    - Access a collection of active logs
    - Start and stop retro logs
    - Start, extend and stop experiment logs
    - Terminate logs before their expiration time
    """

    def GetLogStatus(self, request, context):
        """Retrieve log status by id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActiveLogStatuses(self, request, context):
        """View statuses of active logs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartRetroLog(self, request, context):
        """Given a duration T, StartRetroLog(T) triggers a log covering the timespan [logStartTime,
        t_rpc], where logStartTime = max(t_rpc - T, t_buffer), t_rpc = time of RPC reception, and
        t_buffer = time of first log on the buffer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartExperimentLog(self, request, context):
        """Given a duration T, StartExperimentLog(T) starts logging all data to
        disk with a keepalive/watchdog timer of T. The duration of the log will be [t_rpc, t_rpc + T]
        where t_rpc = time of RPC reception. The duration of this log can be extended by calling
        UpdateExperimentLog before the log's status reaches a terminal state.
        If any retro logs are running, they will be terminated by starting an experiment log.
        Only one experiment log can be run at a time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateExperimentLog(self, request, context):
        """UpdateExperimentLog(id, T) will update the keepalive/watchdog timer of
        the log with the provided id if the log is active. The updated duration
        of the log will be [t_rpc, t_rpc + T] where t_rpc = time of RPC reception.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TerminateLog(self, request, context):
        """Terminate Log before it is complete.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogStatusServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLogStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLogStatus,
                    request_deserializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.GetLogStatusRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.GetLogStatusResponse.SerializeToString,
            ),
            'GetActiveLogStatuses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActiveLogStatuses,
                    request_deserializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.GetActiveLogStatusesRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.GetActiveLogStatusesResponse.SerializeToString,
            ),
            'StartRetroLog': grpc.unary_unary_rpc_method_handler(
                    servicer.StartRetroLog,
                    request_deserializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.StartRetroLogRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.StartRetroLogResponse.SerializeToString,
            ),
            'StartExperimentLog': grpc.unary_unary_rpc_method_handler(
                    servicer.StartExperimentLog,
                    request_deserializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.StartExperimentLogRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.StartExperimentLogResponse.SerializeToString,
            ),
            'UpdateExperimentLog': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateExperimentLog,
                    request_deserializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.UpdateExperimentLogRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.UpdateExperimentLogResponse.SerializeToString,
            ),
            'TerminateLog': grpc.unary_unary_rpc_method_handler(
                    servicer.TerminateLog,
                    request_deserializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.TerminateLogRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_log__status_dot_log__status__pb2.TerminateLogResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.log_status.LogStatusService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LogStatusService(object):
    """The LogStatusService provides clients the ability to
    - Retrieve log status by id
    - Access a collection of active logs
    - Start and stop retro logs
    - Start, extend and stop experiment logs
    - Terminate logs before their expiration time
    """

    @staticmethod
    def GetLogStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.log_status.LogStatusService/GetLogStatus',
            bosdyn_dot_api_dot_log__status_dot_log__status__pb2.GetLogStatusRequest.SerializeToString,
            bosdyn_dot_api_dot_log__status_dot_log__status__pb2.GetLogStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActiveLogStatuses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.log_status.LogStatusService/GetActiveLogStatuses',
            bosdyn_dot_api_dot_log__status_dot_log__status__pb2.GetActiveLogStatusesRequest.SerializeToString,
            bosdyn_dot_api_dot_log__status_dot_log__status__pb2.GetActiveLogStatusesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartRetroLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.log_status.LogStatusService/StartRetroLog',
            bosdyn_dot_api_dot_log__status_dot_log__status__pb2.StartRetroLogRequest.SerializeToString,
            bosdyn_dot_api_dot_log__status_dot_log__status__pb2.StartRetroLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartExperimentLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.log_status.LogStatusService/StartExperimentLog',
            bosdyn_dot_api_dot_log__status_dot_log__status__pb2.StartExperimentLogRequest.SerializeToString,
            bosdyn_dot_api_dot_log__status_dot_log__status__pb2.StartExperimentLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateExperimentLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.log_status.LogStatusService/UpdateExperimentLog',
            bosdyn_dot_api_dot_log__status_dot_log__status__pb2.UpdateExperimentLogRequest.SerializeToString,
            bosdyn_dot_api_dot_log__status_dot_log__status__pb2.UpdateExperimentLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TerminateLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.log_status.LogStatusService/TerminateLog',
            bosdyn_dot_api_dot_log__status_dot_log__status__pb2.TerminateLogRequest.SerializeToString,
            bosdyn_dot_api_dot_log__status_dot_log__status__pb2.TerminateLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
