# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api import data_chunk_pb2 as bosdyn_dot_api_dot_data__chunk__pb2


class AutowalkServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CompileAutowalk = channel.stream_stream(
                '/bosdyn.api.autowalk.AutowalkService/CompileAutowalk',
                request_serializer=bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.FromString,
                )
        self.LoadAutowalk = channel.stream_stream(
                '/bosdyn.api.autowalk.AutowalkService/LoadAutowalk',
                request_serializer=bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.FromString,
                )


class AutowalkServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CompileAutowalk(self, request_iterator, context):
        """Compile a walk into a mission.
        Input DataChunks should deserialize into a CompileAutowalkRequest.
        Output DataChunks should deserialize into a CompileAutowalkResponse.
        This rpc is stateless.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadAutowalk(self, request_iterator, context):
        """Compile a walk into a mission then load to mission service.
        Input DataChunks should deserialize into a LoadAutowalkRequest.
        Output DataChunks should deserialize into a LoadAutowalkResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AutowalkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CompileAutowalk': grpc.stream_stream_rpc_method_handler(
                    servicer.CompileAutowalk,
                    request_deserializer=bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.SerializeToString,
            ),
            'LoadAutowalk': grpc.stream_stream_rpc_method_handler(
                    servicer.LoadAutowalk,
                    request_deserializer=bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.autowalk.AutowalkService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AutowalkService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CompileAutowalk(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/bosdyn.api.autowalk.AutowalkService/CompileAutowalk',
            bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.SerializeToString,
            bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadAutowalk(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/bosdyn.api.autowalk.AutowalkService/LoadAutowalk',
            bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.SerializeToString,
            bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
