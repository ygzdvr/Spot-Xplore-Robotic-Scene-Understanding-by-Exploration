# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api import data_buffer_pb2 as bosdyn_dot_api_dot_data__buffer__pb2


class DataBufferServiceStub(object):
    """This service is a mechanism for adding information to the robot's log files.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecordTextMessages = channel.unary_unary(
                '/bosdyn.api.DataBufferService/RecordTextMessages',
                request_serializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordTextMessagesRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordTextMessagesResponse.FromString,
                )
        self.RecordOperatorComments = channel.unary_unary(
                '/bosdyn.api.DataBufferService/RecordOperatorComments',
                request_serializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordOperatorCommentsRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordOperatorCommentsResponse.FromString,
                )
        self.RecordDataBlobs = channel.unary_unary(
                '/bosdyn.api.DataBufferService/RecordDataBlobs',
                request_serializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordDataBlobsRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordDataBlobsResponse.FromString,
                )
        self.RecordEvents = channel.unary_unary(
                '/bosdyn.api.DataBufferService/RecordEvents',
                request_serializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordEventsRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordEventsResponse.FromString,
                )
        self.RegisterSignalSchema = channel.unary_unary(
                '/bosdyn.api.DataBufferService/RegisterSignalSchema',
                request_serializer=bosdyn_dot_api_dot_data__buffer__pb2.RegisterSignalSchemaRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__buffer__pb2.RegisterSignalSchemaResponse.FromString,
                )
        self.RecordSignalTicks = channel.unary_unary(
                '/bosdyn.api.DataBufferService/RecordSignalTicks',
                request_serializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordSignalTicksRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordSignalTicksResponse.FromString,
                )


class DataBufferServiceServicer(object):
    """This service is a mechanism for adding information to the robot's log files.
    """

    def RecordTextMessages(self, request, context):
        """Add text messages to the log.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordOperatorComments(self, request, context):
        """Add a set of operator messages to the log.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordDataBlobs(self, request, context):
        """Add message-style data to the log.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordEvents(self, request, context):
        """Add event data to the log.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterSignalSchema(self, request, context):
        """Register a log tick schema, allowing client to later log tick data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordSignalTicks(self, request, context):
        """Add signal data for registered signal schema to the log.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataBufferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecordTextMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordTextMessages,
                    request_deserializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordTextMessagesRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordTextMessagesResponse.SerializeToString,
            ),
            'RecordOperatorComments': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordOperatorComments,
                    request_deserializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordOperatorCommentsRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordOperatorCommentsResponse.SerializeToString,
            ),
            'RecordDataBlobs': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordDataBlobs,
                    request_deserializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordDataBlobsRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordDataBlobsResponse.SerializeToString,
            ),
            'RecordEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordEvents,
                    request_deserializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordEventsRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordEventsResponse.SerializeToString,
            ),
            'RegisterSignalSchema': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterSignalSchema,
                    request_deserializer=bosdyn_dot_api_dot_data__buffer__pb2.RegisterSignalSchemaRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__buffer__pb2.RegisterSignalSchemaResponse.SerializeToString,
            ),
            'RecordSignalTicks': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordSignalTicks,
                    request_deserializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordSignalTicksRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__buffer__pb2.RecordSignalTicksResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.DataBufferService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataBufferService(object):
    """This service is a mechanism for adding information to the robot's log files.
    """

    @staticmethod
    def RecordTextMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataBufferService/RecordTextMessages',
            bosdyn_dot_api_dot_data__buffer__pb2.RecordTextMessagesRequest.SerializeToString,
            bosdyn_dot_api_dot_data__buffer__pb2.RecordTextMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordOperatorComments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataBufferService/RecordOperatorComments',
            bosdyn_dot_api_dot_data__buffer__pb2.RecordOperatorCommentsRequest.SerializeToString,
            bosdyn_dot_api_dot_data__buffer__pb2.RecordOperatorCommentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordDataBlobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataBufferService/RecordDataBlobs',
            bosdyn_dot_api_dot_data__buffer__pb2.RecordDataBlobsRequest.SerializeToString,
            bosdyn_dot_api_dot_data__buffer__pb2.RecordDataBlobsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataBufferService/RecordEvents',
            bosdyn_dot_api_dot_data__buffer__pb2.RecordEventsRequest.SerializeToString,
            bosdyn_dot_api_dot_data__buffer__pb2.RecordEventsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterSignalSchema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataBufferService/RegisterSignalSchema',
            bosdyn_dot_api_dot_data__buffer__pb2.RegisterSignalSchemaRequest.SerializeToString,
            bosdyn_dot_api_dot_data__buffer__pb2.RegisterSignalSchemaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordSignalTicks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataBufferService/RecordSignalTicks',
            bosdyn_dot_api_dot_data__buffer__pb2.RecordSignalTicksRequest.SerializeToString,
            bosdyn_dot_api_dot_data__buffer__pb2.RecordSignalTicksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
