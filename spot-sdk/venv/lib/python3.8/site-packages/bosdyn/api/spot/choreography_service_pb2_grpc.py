# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api.spot import choreography_sequence_pb2 as bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2


class ChoreographyServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListAllMoves = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/ListAllMoves',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ListAllMovesRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ListAllMovesResponse.FromString,
                )
        self.ListAllSequences = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/ListAllSequences',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ListAllSequencesRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ListAllSequencesResponse.FromString,
                )
        self.GetChoreographySequence = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/GetChoreographySequence',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.GetChoreographySequenceRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.GetChoreographySequenceResponse.FromString,
                )
        self.GetAnimation = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/GetAnimation',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.GetAnimationRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.GetAnimationResponse.FromString,
                )
        self.DeleteSequence = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/DeleteSequence',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.DeleteSequenceRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.DeleteSequenceResponse.FromString,
                )
        self.SaveSequence = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/SaveSequence',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.SaveSequenceRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.SaveSequenceResponse.FromString,
                )
        self.ModifyChoreographyInfo = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/ModifyChoreographyInfo',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ModifyChoreographyInfoRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ModifyChoreographyInfoResponse.FromString,
                )
        self.ClearAllSequenceFiles = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/ClearAllSequenceFiles',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ClearAllSequenceFilesRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ClearAllSequenceFilesResponse.FromString,
                )
        self.UploadChoreography = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/UploadChoreography',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.UploadChoreographyRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.UploadChoreographyResponse.FromString,
                )
        self.UploadAnimatedMove = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/UploadAnimatedMove',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.UploadAnimatedMoveRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.UploadAnimatedMoveResponse.FromString,
                )
        self.ExecuteChoreography = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/ExecuteChoreography',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ExecuteChoreographyRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ExecuteChoreographyResponse.FromString,
                )
        self.StartRecordingState = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/StartRecordingState',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.StartRecordingStateRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.StartRecordingStateResponse.FromString,
                )
        self.StopRecordingState = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/StopRecordingState',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.StopRecordingStateRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.StopRecordingStateResponse.FromString,
                )
        self.DownloadRobotStateLog = channel.unary_stream(
                '/bosdyn.api.spot.ChoreographyService/DownloadRobotStateLog',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.DownloadRobotStateLogRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.DownloadRobotStateLogResponse.FromString,
                )
        self.ChoreographyStatus = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/ChoreographyStatus',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyStatusRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyStatusResponse.FromString,
                )
        self.ChoreographyCommand = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/ChoreographyCommand',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyCommandRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyCommandResponse.FromString,
                )
        self.ChoreographyTimeAdjust = channel.unary_unary(
                '/bosdyn.api.spot.ChoreographyService/ChoreographyTimeAdjust',
                request_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyTimeAdjustRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyTimeAdjustResponse.FromString,
                )


class ChoreographyServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListAllMoves(self, request, context):
        """List the available dance moves and their parameter information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAllSequences(self, request, context):
        """List the available choreography sequences currently on the robot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChoreographySequence(self, request, context):
        """Return the ChoreographySequence with the given name and any requested animation data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAnimation(self, request, context):
        """Return the full Animation message with the given name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSequence(self, request, context):
        """Delete a retained choreography sequence from the collection of user uploaded
        choreography sequences.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveSequence(self, request, context):
        """Save a user uploaded choreography sequence to the robots collection of
        retained choreography sequences.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyChoreographyInfo(self, request, context):
        """Modify the metadata of a choreography sequence.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearAllSequenceFiles(self, request, context):
        """Clear all retained choreography sequence files from robot memory.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadChoreography(self, request, context):
        """Upload a dance to the robot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadAnimatedMove(self, request, context):
        """Upload an animation to the robot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteChoreography(self, request, context):
        """Execute the uploaded dance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartRecordingState(self, request, context):
        """Manually start (or continue) recording the robot state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopRecordingState(self, request, context):
        """Manually stop recording the robot state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadRobotStateLog(self, request, context):
        """Download log of the latest recorded robot state information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChoreographyStatus(self, request, context):
        """Report the status of a dancing robot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChoreographyCommand(self, request, context):
        """Commands intended for individual dance moves that are currently executing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChoreographyTimeAdjust(self, request, context):
        """Adjust the time when a robot should start dancing within a tolerance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChoreographyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListAllMoves': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllMoves,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ListAllMovesRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ListAllMovesResponse.SerializeToString,
            ),
            'ListAllSequences': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllSequences,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ListAllSequencesRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ListAllSequencesResponse.SerializeToString,
            ),
            'GetChoreographySequence': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChoreographySequence,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.GetChoreographySequenceRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.GetChoreographySequenceResponse.SerializeToString,
            ),
            'GetAnimation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAnimation,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.GetAnimationRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.GetAnimationResponse.SerializeToString,
            ),
            'DeleteSequence': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSequence,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.DeleteSequenceRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.DeleteSequenceResponse.SerializeToString,
            ),
            'SaveSequence': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveSequence,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.SaveSequenceRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.SaveSequenceResponse.SerializeToString,
            ),
            'ModifyChoreographyInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyChoreographyInfo,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ModifyChoreographyInfoRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ModifyChoreographyInfoResponse.SerializeToString,
            ),
            'ClearAllSequenceFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearAllSequenceFiles,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ClearAllSequenceFilesRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ClearAllSequenceFilesResponse.SerializeToString,
            ),
            'UploadChoreography': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadChoreography,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.UploadChoreographyRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.UploadChoreographyResponse.SerializeToString,
            ),
            'UploadAnimatedMove': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadAnimatedMove,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.UploadAnimatedMoveRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.UploadAnimatedMoveResponse.SerializeToString,
            ),
            'ExecuteChoreography': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteChoreography,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ExecuteChoreographyRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ExecuteChoreographyResponse.SerializeToString,
            ),
            'StartRecordingState': grpc.unary_unary_rpc_method_handler(
                    servicer.StartRecordingState,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.StartRecordingStateRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.StartRecordingStateResponse.SerializeToString,
            ),
            'StopRecordingState': grpc.unary_unary_rpc_method_handler(
                    servicer.StopRecordingState,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.StopRecordingStateRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.StopRecordingStateResponse.SerializeToString,
            ),
            'DownloadRobotStateLog': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadRobotStateLog,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.DownloadRobotStateLogRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.DownloadRobotStateLogResponse.SerializeToString,
            ),
            'ChoreographyStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ChoreographyStatus,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyStatusRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyStatusResponse.SerializeToString,
            ),
            'ChoreographyCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ChoreographyCommand,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyCommandRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyCommandResponse.SerializeToString,
            ),
            'ChoreographyTimeAdjust': grpc.unary_unary_rpc_method_handler(
                    servicer.ChoreographyTimeAdjust,
                    request_deserializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyTimeAdjustRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyTimeAdjustResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.spot.ChoreographyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChoreographyService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListAllMoves(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/ListAllMoves',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ListAllMovesRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ListAllMovesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAllSequences(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/ListAllSequences',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ListAllSequencesRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ListAllSequencesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChoreographySequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/GetChoreographySequence',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.GetChoreographySequenceRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.GetChoreographySequenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAnimation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/GetAnimation',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.GetAnimationRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.GetAnimationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/DeleteSequence',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.DeleteSequenceRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.DeleteSequenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveSequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/SaveSequence',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.SaveSequenceRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.SaveSequenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModifyChoreographyInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/ModifyChoreographyInfo',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ModifyChoreographyInfoRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ModifyChoreographyInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearAllSequenceFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/ClearAllSequenceFiles',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ClearAllSequenceFilesRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ClearAllSequenceFilesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadChoreography(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/UploadChoreography',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.UploadChoreographyRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.UploadChoreographyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadAnimatedMove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/UploadAnimatedMove',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.UploadAnimatedMoveRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.UploadAnimatedMoveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteChoreography(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/ExecuteChoreography',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ExecuteChoreographyRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ExecuteChoreographyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartRecordingState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/StartRecordingState',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.StartRecordingStateRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.StartRecordingStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopRecordingState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/StopRecordingState',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.StopRecordingStateRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.StopRecordingStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadRobotStateLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bosdyn.api.spot.ChoreographyService/DownloadRobotStateLog',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.DownloadRobotStateLogRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.DownloadRobotStateLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChoreographyStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/ChoreographyStatus',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyStatusRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChoreographyCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/ChoreographyCommand',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyCommandRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyCommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChoreographyTimeAdjust(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot.ChoreographyService/ChoreographyTimeAdjust',
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyTimeAdjustRequest.SerializeToString,
            bosdyn_dot_api_dot_spot_dot_choreography__sequence__pb2.ChoreographyTimeAdjustResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
