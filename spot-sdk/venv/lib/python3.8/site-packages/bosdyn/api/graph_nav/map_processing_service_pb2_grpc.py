# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api.graph_nav import map_processing_pb2 as bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2


class MapProcessingServiceStub(object):
    """Defines services for processing an existing GraphNav map.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessTopology = channel.unary_stream(
                '/bosdyn.api.graph_nav.MapProcessingService/ProcessTopology',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2.ProcessTopologyRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2.ProcessTopologyResponse.FromString,
                )
        self.ProcessAnchoring = channel.unary_stream(
                '/bosdyn.api.graph_nav.MapProcessingService/ProcessAnchoring',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2.ProcessAnchoringRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2.ProcessAnchoringResponse.FromString,
                )


class MapProcessingServiceServicer(object):
    """Defines services for processing an existing GraphNav map.
    """

    def ProcessTopology(self, request, context):
        """Processes a GraphNav map by creating additional edges or waypoints. After processing,
        a new subgraph is created containing additional waypoints or edges to add to the map.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessAnchoring(self, request, context):
        """Processes a GraphNav map by modifying the anchoring of waypoints and world objects in the map
        with respect to a seed frame. After processing, a new anchoring is streamed back.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapProcessingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessTopology': grpc.unary_stream_rpc_method_handler(
                    servicer.ProcessTopology,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2.ProcessTopologyRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2.ProcessTopologyResponse.SerializeToString,
            ),
            'ProcessAnchoring': grpc.unary_stream_rpc_method_handler(
                    servicer.ProcessAnchoring,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2.ProcessAnchoringRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2.ProcessAnchoringResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.graph_nav.MapProcessingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapProcessingService(object):
    """Defines services for processing an existing GraphNav map.
    """

    @staticmethod
    def ProcessTopology(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bosdyn.api.graph_nav.MapProcessingService/ProcessTopology',
            bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2.ProcessTopologyRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2.ProcessTopologyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessAnchoring(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bosdyn.api.graph_nav.MapProcessingService/ProcessAnchoring',
            bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2.ProcessAnchoringRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_map__processing__pb2.ProcessAnchoringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
