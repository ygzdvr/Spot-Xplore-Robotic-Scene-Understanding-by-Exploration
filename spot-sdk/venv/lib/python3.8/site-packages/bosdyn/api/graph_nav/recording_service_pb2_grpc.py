# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api.graph_nav import recording_pb2 as bosdyn_dot_api_dot_graph__nav_dot_recording__pb2


class GraphNavRecordingServiceStub(object):
    """The recording service can be used to record a Graph Nav map (containing waypoints and edges).
    The recorded map can consist of the following:
    * Chain: a topological arrangement of waypoints/edges where every waypoint has at least 1
    but at most 2 edges attached to it.
    * Branch: separate Chains can be joined together into a Branch at exactly one waypoint.
    When recording a map using the recording service, a common pattern is:
    * Call StartRecording to begin recording a chain of waypoints.
    * Call SetRecordingEnvironment to define persistent annotations for the edges and waypoints.
    * While recording, call GetRecordStatus to get feedback on the state of the recording service.
    * While recording, call GetMapStatus to determine what waypoints have been created.
    * Optionally call CreateWaypoint to create waypoints in specific locations.
    * Call StopRecording to pause the recording service and create branches.
    * While recording (or after completing recording), call DownloadWaypoint/Edge Snapshot rpcs
    from the GraphNavService to download the large sensor data with the map.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartRecording = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavRecordingService/StartRecording',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.StartRecordingRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.StartRecordingResponse.FromString,
                )
        self.StopRecording = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavRecordingService/StopRecording',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.StopRecordingRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.StopRecordingResponse.FromString,
                )
        self.CreateWaypoint = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavRecordingService/CreateWaypoint',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.CreateWaypointRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.CreateWaypointResponse.FromString,
                )
        self.SetRecordingEnvironment = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavRecordingService/SetRecordingEnvironment',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.SetRecordingEnvironmentRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.SetRecordingEnvironmentResponse.FromString,
                )
        self.CreateEdge = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavRecordingService/CreateEdge',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.CreateEdgeRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.CreateEdgeResponse.FromString,
                )
        self.GetRecordStatus = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavRecordingService/GetRecordStatus',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.GetRecordStatusRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.GetRecordStatusResponse.FromString,
                )


class GraphNavRecordingServiceServicer(object):
    """The recording service can be used to record a Graph Nav map (containing waypoints and edges).
    The recorded map can consist of the following:
    * Chain: a topological arrangement of waypoints/edges where every waypoint has at least 1
    but at most 2 edges attached to it.
    * Branch: separate Chains can be joined together into a Branch at exactly one waypoint.
    When recording a map using the recording service, a common pattern is:
    * Call StartRecording to begin recording a chain of waypoints.
    * Call SetRecordingEnvironment to define persistent annotations for the edges and waypoints.
    * While recording, call GetRecordStatus to get feedback on the state of the recording service.
    * While recording, call GetMapStatus to determine what waypoints have been created.
    * Optionally call CreateWaypoint to create waypoints in specific locations.
    * Call StopRecording to pause the recording service and create branches.
    * While recording (or after completing recording), call DownloadWaypoint/Edge Snapshot rpcs
    from the GraphNavService to download the large sensor data with the map.
    """

    def StartRecording(self, request, context):
        """Start recording the map from the current localization.
        Creates a waypoint if you are starting to record. Otherwise, waits until you are
        sufficiently far away from the previous waypoint.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopRecording(self, request, context):
        """Stop recording the map from the current localization.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWaypoint(self, request, context):
        """Create a new waypoint at the current localization.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRecordingEnvironment(self, request, context):
        """Set the environment and name prefix to use for the recording.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEdge(self, request, context):
        """Create an arbitrary edge between two waypoints.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecordStatus(self, request, context):
        """Tells the client the internal state of the record service, and the structure of the map that
        has been recorded so far.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GraphNavRecordingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartRecording': grpc.unary_unary_rpc_method_handler(
                    servicer.StartRecording,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.StartRecordingRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.StartRecordingResponse.SerializeToString,
            ),
            'StopRecording': grpc.unary_unary_rpc_method_handler(
                    servicer.StopRecording,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.StopRecordingRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.StopRecordingResponse.SerializeToString,
            ),
            'CreateWaypoint': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWaypoint,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.CreateWaypointRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.CreateWaypointResponse.SerializeToString,
            ),
            'SetRecordingEnvironment': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRecordingEnvironment,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.SetRecordingEnvironmentRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.SetRecordingEnvironmentResponse.SerializeToString,
            ),
            'CreateEdge': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEdge,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.CreateEdgeRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.CreateEdgeResponse.SerializeToString,
            ),
            'GetRecordStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecordStatus,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.GetRecordStatusRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.GetRecordStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.graph_nav.GraphNavRecordingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GraphNavRecordingService(object):
    """The recording service can be used to record a Graph Nav map (containing waypoints and edges).
    The recorded map can consist of the following:
    * Chain: a topological arrangement of waypoints/edges where every waypoint has at least 1
    but at most 2 edges attached to it.
    * Branch: separate Chains can be joined together into a Branch at exactly one waypoint.
    When recording a map using the recording service, a common pattern is:
    * Call StartRecording to begin recording a chain of waypoints.
    * Call SetRecordingEnvironment to define persistent annotations for the edges and waypoints.
    * While recording, call GetRecordStatus to get feedback on the state of the recording service.
    * While recording, call GetMapStatus to determine what waypoints have been created.
    * Optionally call CreateWaypoint to create waypoints in specific locations.
    * Call StopRecording to pause the recording service and create branches.
    * While recording (or after completing recording), call DownloadWaypoint/Edge Snapshot rpcs
    from the GraphNavService to download the large sensor data with the map.
    """

    @staticmethod
    def StartRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavRecordingService/StartRecording',
            bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.StartRecordingRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.StartRecordingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavRecordingService/StopRecording',
            bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.StopRecordingRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.StopRecordingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateWaypoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavRecordingService/CreateWaypoint',
            bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.CreateWaypointRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.CreateWaypointResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRecordingEnvironment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavRecordingService/SetRecordingEnvironment',
            bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.SetRecordingEnvironmentRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.SetRecordingEnvironmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateEdge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavRecordingService/CreateEdge',
            bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.CreateEdgeRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.CreateEdgeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRecordStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavRecordingService/GetRecordStatus',
            bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.GetRecordStatusRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_recording__pb2.GetRecordStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
