# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api.graph_nav import graph_nav_pb2 as bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2


class GraphNavServiceStub(object):
    """The GraphNav service service is a place-based localization and locomotion service. The service
    can be used to get/set the localization, upload and download the current graph nav maps, and send
    navigation requests to move around the map.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetLocalization = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavService/SetLocalization',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.SetLocalizationRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.SetLocalizationResponse.FromString,
                )
        self.NavigateRoute = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavService/NavigateRoute',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateRouteRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateRouteResponse.FromString,
                )
        self.NavigateTo = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavService/NavigateTo',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateToRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateToResponse.FromString,
                )
        self.NavigateToAnchor = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavService/NavigateToAnchor',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateToAnchorRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateToAnchorResponse.FromString,
                )
        self.NavigationFeedback = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavService/NavigationFeedback',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigationFeedbackRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigationFeedbackResponse.FromString,
                )
        self.GetLocalizationState = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavService/GetLocalizationState',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.GetLocalizationStateRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.GetLocalizationStateResponse.FromString,
                )
        self.ClearGraph = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavService/ClearGraph',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.ClearGraphRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.ClearGraphResponse.FromString,
                )
        self.DownloadGraph = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavService/DownloadGraph',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadGraphRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadGraphResponse.FromString,
                )
        self.DownloadGraphStreaming = channel.unary_stream(
                '/bosdyn.api.graph_nav.GraphNavService/DownloadGraphStreaming',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadGraphRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadGraphStreamingResponse.FromString,
                )
        self.UploadGraph = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavService/UploadGraph',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadGraphRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadGraphResponse.FromString,
                )
        self.UploadGraphStreaming = channel.stream_unary(
                '/bosdyn.api.graph_nav.GraphNavService/UploadGraphStreaming',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadGraphStreamingRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadGraphResponse.FromString,
                )
        self.UploadWaypointSnapshot = channel.stream_unary(
                '/bosdyn.api.graph_nav.GraphNavService/UploadWaypointSnapshot',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadWaypointSnapshotRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadWaypointSnapshotResponse.FromString,
                )
        self.UploadEdgeSnapshot = channel.stream_unary(
                '/bosdyn.api.graph_nav.GraphNavService/UploadEdgeSnapshot',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadEdgeSnapshotRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadEdgeSnapshotResponse.FromString,
                )
        self.DownloadWaypointSnapshot = channel.unary_stream(
                '/bosdyn.api.graph_nav.GraphNavService/DownloadWaypointSnapshot',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadWaypointSnapshotRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadWaypointSnapshotResponse.FromString,
                )
        self.DownloadEdgeSnapshot = channel.unary_stream(
                '/bosdyn.api.graph_nav.GraphNavService/DownloadEdgeSnapshot',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadEdgeSnapshotRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadEdgeSnapshotResponse.FromString,
                )
        self.ValidateGraph = channel.unary_unary(
                '/bosdyn.api.graph_nav.GraphNavService/ValidateGraph',
                request_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.ValidateGraphRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.ValidateGraphResponse.FromString,
                )


class GraphNavServiceServicer(object):
    """The GraphNav service service is a place-based localization and locomotion service. The service
    can be used to get/set the localization, upload and download the current graph nav maps, and send
    navigation requests to move around the map.
    """

    def SetLocalization(self, request, context):
        """Trigger a manual localization. Typically done to provide the initial localization.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NavigateRoute(self, request, context):
        """Tell GraphNav to navigate/traverse a given route.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NavigateTo(self, request, context):
        """Tell GraphNav to navigate to a waypoint along a route it chooses.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NavigateToAnchor(self, request, context):
        """Tell GraphNav to navigate to a goal with respect to the current anchoring.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NavigationFeedback(self, request, context):
        """Get feedback on active navigation command.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLocalizationState(self, request, context):
        """Get the localization status and data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearGraph(self, request, context):
        """Clears the local graph structure. Also erases any snapshots currently in RAM.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadGraph(self, request, context):
        """Download the graph structure.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadGraphStreaming(self, request, context):
        """This is a streaming version of the DownloadGraph RPC.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadGraph(self, request, context):
        """Upload the full list of waypoint IDs, graph topology and other small info.
        Note: if multiple clients/RPCs are attempting to upload a graph at the same time, uploads
        will be performed synchronously in the order in which they are received, and the later
        UploadGraph request will block until the earlier completes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadGraphStreaming(self, request_iterator, context):
        """This is a streaming version of UploadGraph to allow uploading larger graphs.
        Note: as with UploadWaypointSnapshot, this streaming process involves serializing a full
        UploadGraph message from chunks. After all the chunks have been uploaded, a regular
        UploadGraph RPC will be performed internally, so UploadGraphStreaming has the same semantics
        as UploadGraph when it completes. That is, UploadGraphStreaming is *not* to be used for
        incrementally uploading graph data as the robot is navigating -- this is merely a streaming
        wrapper around UploadGraph.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadWaypointSnapshot(self, request_iterator, context):
        """Uploads large waypoint snapshot as a stream for a particular waypoint.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadEdgeSnapshot(self, request_iterator, context):
        """Uploads large edge snapshot as a stream for a particular edge.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadWaypointSnapshot(self, request, context):
        """Download waypoint data from the server. If the snapshot exists in disk cache, it will be
        loaded.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadEdgeSnapshot(self, request, context):
        """Download edge data from the server. If the snapshot exists in disk cache, it will be loaded.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateGraph(self, request, context):
        """Verify that the graph is still valid and all required external services are still available.
        A map that was valid at upload time may not still be valid if required services are no longer
        running.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GraphNavServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetLocalization': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLocalization,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.SetLocalizationRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.SetLocalizationResponse.SerializeToString,
            ),
            'NavigateRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.NavigateRoute,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateRouteRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateRouteResponse.SerializeToString,
            ),
            'NavigateTo': grpc.unary_unary_rpc_method_handler(
                    servicer.NavigateTo,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateToRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateToResponse.SerializeToString,
            ),
            'NavigateToAnchor': grpc.unary_unary_rpc_method_handler(
                    servicer.NavigateToAnchor,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateToAnchorRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateToAnchorResponse.SerializeToString,
            ),
            'NavigationFeedback': grpc.unary_unary_rpc_method_handler(
                    servicer.NavigationFeedback,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigationFeedbackRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigationFeedbackResponse.SerializeToString,
            ),
            'GetLocalizationState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLocalizationState,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.GetLocalizationStateRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.GetLocalizationStateResponse.SerializeToString,
            ),
            'ClearGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearGraph,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.ClearGraphRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.ClearGraphResponse.SerializeToString,
            ),
            'DownloadGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadGraph,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadGraphRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadGraphResponse.SerializeToString,
            ),
            'DownloadGraphStreaming': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadGraphStreaming,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadGraphRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadGraphStreamingResponse.SerializeToString,
            ),
            'UploadGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadGraph,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadGraphRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadGraphResponse.SerializeToString,
            ),
            'UploadGraphStreaming': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadGraphStreaming,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadGraphStreamingRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadGraphResponse.SerializeToString,
            ),
            'UploadWaypointSnapshot': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadWaypointSnapshot,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadWaypointSnapshotRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadWaypointSnapshotResponse.SerializeToString,
            ),
            'UploadEdgeSnapshot': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadEdgeSnapshot,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadEdgeSnapshotRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadEdgeSnapshotResponse.SerializeToString,
            ),
            'DownloadWaypointSnapshot': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadWaypointSnapshot,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadWaypointSnapshotRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadWaypointSnapshotResponse.SerializeToString,
            ),
            'DownloadEdgeSnapshot': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadEdgeSnapshot,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadEdgeSnapshotRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadEdgeSnapshotResponse.SerializeToString,
            ),
            'ValidateGraph': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateGraph,
                    request_deserializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.ValidateGraphRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.ValidateGraphResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.graph_nav.GraphNavService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GraphNavService(object):
    """The GraphNav service service is a place-based localization and locomotion service. The service
    can be used to get/set the localization, upload and download the current graph nav maps, and send
    navigation requests to move around the map.
    """

    @staticmethod
    def SetLocalization(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavService/SetLocalization',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.SetLocalizationRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.SetLocalizationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NavigateRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavService/NavigateRoute',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateRouteRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateRouteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NavigateTo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavService/NavigateTo',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateToRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateToResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NavigateToAnchor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavService/NavigateToAnchor',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateToAnchorRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigateToAnchorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NavigationFeedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavService/NavigationFeedback',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigationFeedbackRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.NavigationFeedbackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLocalizationState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavService/GetLocalizationState',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.GetLocalizationStateRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.GetLocalizationStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavService/ClearGraph',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.ClearGraphRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.ClearGraphResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavService/DownloadGraph',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadGraphRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadGraphResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadGraphStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bosdyn.api.graph_nav.GraphNavService/DownloadGraphStreaming',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadGraphRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadGraphStreamingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavService/UploadGraph',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadGraphRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadGraphResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadGraphStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/bosdyn.api.graph_nav.GraphNavService/UploadGraphStreaming',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadGraphStreamingRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadGraphResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadWaypointSnapshot(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/bosdyn.api.graph_nav.GraphNavService/UploadWaypointSnapshot',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadWaypointSnapshotRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadWaypointSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadEdgeSnapshot(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/bosdyn.api.graph_nav.GraphNavService/UploadEdgeSnapshot',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadEdgeSnapshotRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.UploadEdgeSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadWaypointSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bosdyn.api.graph_nav.GraphNavService/DownloadWaypointSnapshot',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadWaypointSnapshotRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadWaypointSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadEdgeSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bosdyn.api.graph_nav.GraphNavService/DownloadEdgeSnapshot',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadEdgeSnapshotRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.DownloadEdgeSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateGraph(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.graph_nav.GraphNavService/ValidateGraph',
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.ValidateGraphRequest.SerializeToString,
            bosdyn_dot_api_dot_graph__nav_dot_graph__nav__pb2.ValidateGraphResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
