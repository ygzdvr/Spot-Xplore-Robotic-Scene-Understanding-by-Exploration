# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api import directory_registration_pb2 as bosdyn_dot_api_dot_directory__registration__pb2


class DirectoryRegistrationServiceStub(object):
    """DirectoryRegistrationService is a private class that lets services be
    discovered by clients by adding them to a discovery database.  Services
    can live on robot, payload, or other accessible cloud-based locations.
    Each service is responsible for registering itself with this service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterService = channel.unary_unary(
                '/bosdyn.api.DirectoryRegistrationService/RegisterService',
                request_serializer=bosdyn_dot_api_dot_directory__registration__pb2.RegisterServiceRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_directory__registration__pb2.RegisterServiceResponse.FromString,
                )
        self.UnregisterService = channel.unary_unary(
                '/bosdyn.api.DirectoryRegistrationService/UnregisterService',
                request_serializer=bosdyn_dot_api_dot_directory__registration__pb2.UnregisterServiceRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_directory__registration__pb2.UnregisterServiceResponse.FromString,
                )
        self.UpdateService = channel.unary_unary(
                '/bosdyn.api.DirectoryRegistrationService/UpdateService',
                request_serializer=bosdyn_dot_api_dot_directory__registration__pb2.UpdateServiceRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_directory__registration__pb2.UpdateServiceResponse.FromString,
                )


class DirectoryRegistrationServiceServicer(object):
    """DirectoryRegistrationService is a private class that lets services be
    discovered by clients by adding them to a discovery database.  Services
    can live on robot, payload, or other accessible cloud-based locations.
    Each service is responsible for registering itself with this service.
    """

    def RegisterService(self, request, context):
        """Called by a producer to register as a provider with the application.  Returns the
        record for that provider.  Requires unique name and correctly filled out service
        record in request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterService(self, request, context):
        """Called by a producer to remove its registration from the DirectoryManager.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateService(self, request, context):
        """Update the ServiceEntry for a producer on the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DirectoryRegistrationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterService': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterService,
                    request_deserializer=bosdyn_dot_api_dot_directory__registration__pb2.RegisterServiceRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_directory__registration__pb2.RegisterServiceResponse.SerializeToString,
            ),
            'UnregisterService': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterService,
                    request_deserializer=bosdyn_dot_api_dot_directory__registration__pb2.UnregisterServiceRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_directory__registration__pb2.UnregisterServiceResponse.SerializeToString,
            ),
            'UpdateService': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateService,
                    request_deserializer=bosdyn_dot_api_dot_directory__registration__pb2.UpdateServiceRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_directory__registration__pb2.UpdateServiceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.DirectoryRegistrationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DirectoryRegistrationService(object):
    """DirectoryRegistrationService is a private class that lets services be
    discovered by clients by adding them to a discovery database.  Services
    can live on robot, payload, or other accessible cloud-based locations.
    Each service is responsible for registering itself with this service.
    """

    @staticmethod
    def RegisterService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DirectoryRegistrationService/RegisterService',
            bosdyn_dot_api_dot_directory__registration__pb2.RegisterServiceRequest.SerializeToString,
            bosdyn_dot_api_dot_directory__registration__pb2.RegisterServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnregisterService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DirectoryRegistrationService/UnregisterService',
            bosdyn_dot_api_dot_directory__registration__pb2.UnregisterServiceRequest.SerializeToString,
            bosdyn_dot_api_dot_directory__registration__pb2.UnregisterServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DirectoryRegistrationService/UpdateService',
            bosdyn_dot_api_dot_directory__registration__pb2.UpdateServiceRequest.SerializeToString,
            bosdyn_dot_api_dot_directory__registration__pb2.UpdateServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
