# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api import data_acquisition_store_pb2 as bosdyn_dot_api_dot_data__acquisition__store__pb2
from bosdyn.api import data_chunk_pb2 as bosdyn_dot_api_dot_data__chunk__pb2


class DataAcquisitionStoreServiceStub(object):
    """The DataAcquisitionStoreService is used to store data (images, data, metadata) on the robot
    in association with the DataIdentifiers specified by the DataAcquisitionService. Additionally,
    requests can be made to the DataAcquisitionStoreService to identify different pieces of data or
    entire capture actions which match query parameters, such as time ranges or action/group names.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListCaptureActions = channel.unary_unary(
                '/bosdyn.api.DataAcquisitionStoreService/ListCaptureActions',
                request_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListCaptureActionsRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListCaptureActionsResponse.FromString,
                )
        self.ListStoredData = channel.unary_unary(
                '/bosdyn.api.DataAcquisitionStoreService/ListStoredData',
                request_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredDataRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredDataResponse.FromString,
                )
        self.StoreData = channel.unary_unary(
                '/bosdyn.api.DataAcquisitionStoreService/StoreData',
                request_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreDataRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreDataResponse.FromString,
                )
        self.StoreDataStream = channel.stream_unary(
                '/bosdyn.api.DataAcquisitionStoreService/StoreDataStream',
                request_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreStreamRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreStreamResponse.FromString,
                )
        self.ListStoredImages = channel.unary_unary(
                '/bosdyn.api.DataAcquisitionStoreService/ListStoredImages',
                request_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredImagesRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredImagesResponse.FromString,
                )
        self.StoreImage = channel.unary_unary(
                '/bosdyn.api.DataAcquisitionStoreService/StoreImage',
                request_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreImageRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreImageResponse.FromString,
                )
        self.ListStoredMetadata = channel.unary_unary(
                '/bosdyn.api.DataAcquisitionStoreService/ListStoredMetadata',
                request_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredMetadataRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredMetadataResponse.FromString,
                )
        self.StoreMetadata = channel.unary_unary(
                '/bosdyn.api.DataAcquisitionStoreService/StoreMetadata',
                request_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreMetadataRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreMetadataResponse.FromString,
                )
        self.ListStoredAlertData = channel.unary_unary(
                '/bosdyn.api.DataAcquisitionStoreService/ListStoredAlertData',
                request_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredAlertDataRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredAlertDataResponse.FromString,
                )
        self.StoreAlertData = channel.unary_unary(
                '/bosdyn.api.DataAcquisitionStoreService/StoreAlertData',
                request_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreAlertDataRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreAlertDataResponse.FromString,
                )
        self.QueryStoredCaptures = channel.unary_stream(
                '/bosdyn.api.DataAcquisitionStoreService/QueryStoredCaptures',
                request_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.QueryStoredCapturesRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.FromString,
                )
        self.QueryMaxCaptureId = channel.unary_unary(
                '/bosdyn.api.DataAcquisitionStoreService/QueryMaxCaptureId',
                request_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.QueryMaxCaptureIdRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.QueryMaxCaptureIdResponse.FromString,
                )


class DataAcquisitionStoreServiceServicer(object):
    """The DataAcquisitionStoreService is used to store data (images, data, metadata) on the robot
    in association with the DataIdentifiers specified by the DataAcquisitionService. Additionally,
    requests can be made to the DataAcquisitionStoreService to identify different pieces of data or
    entire capture actions which match query parameters, such as time ranges or action/group names.
    """

    def ListCaptureActions(self, request, context):
        """List all CaptureActionIds (which identify an entire AcquireData RPC's data captures)
        that match the query parameters provided in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStoredData(self, request, context):
        """List data identifiers (which identify specific pieces of data from
        an action) for stored data that satisfy the query parameters in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreData(self, request, context):
        """Store arbitrary data associated with a DataIdentifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreDataStream(self, request_iterator, context):
        """Store arbitrary data associated with a DataIdentifier through a stream. Supports files > 100
        MB and below the Data Acquisition Store capacity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStoredImages(self, request, context):
        """Type-safe to images: list data identifiers (which identify specific images
        from an action) for stored images that satisfy the
        query parameters in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreImage(self, request, context):
        """Type-safe to images: store image data associated with a DataIdentifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStoredMetadata(self, request, context):
        """Type-safe to JSON metadata: list data identifiers (which identify specific metadata from
        an action) for stored metadata that satisfy the query parameters in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreMetadata(self, request, context):
        """Type-safe to JSON metadata: store metadata associated with a DataIdentifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListStoredAlertData(self, request, context):
        """List data identifiers (which identify specific AlertData from
        an action) for stored AlertData that satisfy the query parameters in the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreAlertData(self, request, context):
        """Store AlertData associated with a DataIdentifier.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryStoredCaptures(self, request, context):
        """Query the Data Acquisition Store for captured data. This streaming RPC returns a single
        QueryStoredCapturesResponse message, encoded as a list of DataChunk messages.

        If the first capture matching the query is larger than an internal size limit set in the
        service, the QueryStoredCapturesResponse message contains only that first capture matching
        the query.

        Otherwise, the QueryStoredCapturesResponse message contains as many matching captures as can
        fit within the internal size limit, without breaking the results order.

        To get all captures that match a query, you must make this RPC until it returns an empty
        QueryStoredCapturesResponse with no elements in its "results" field.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryMaxCaptureId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataAcquisitionStoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListCaptureActions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCaptureActions,
                    request_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListCaptureActionsRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListCaptureActionsResponse.SerializeToString,
            ),
            'ListStoredData': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStoredData,
                    request_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredDataRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredDataResponse.SerializeToString,
            ),
            'StoreData': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreData,
                    request_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreDataRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreDataResponse.SerializeToString,
            ),
            'StoreDataStream': grpc.stream_unary_rpc_method_handler(
                    servicer.StoreDataStream,
                    request_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreStreamRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreStreamResponse.SerializeToString,
            ),
            'ListStoredImages': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStoredImages,
                    request_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredImagesRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredImagesResponse.SerializeToString,
            ),
            'StoreImage': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreImage,
                    request_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreImageRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreImageResponse.SerializeToString,
            ),
            'ListStoredMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStoredMetadata,
                    request_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredMetadataRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredMetadataResponse.SerializeToString,
            ),
            'StoreMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreMetadata,
                    request_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreMetadataRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreMetadataResponse.SerializeToString,
            ),
            'ListStoredAlertData': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStoredAlertData,
                    request_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredAlertDataRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredAlertDataResponse.SerializeToString,
            ),
            'StoreAlertData': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreAlertData,
                    request_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreAlertDataRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreAlertDataResponse.SerializeToString,
            ),
            'QueryStoredCaptures': grpc.unary_stream_rpc_method_handler(
                    servicer.QueryStoredCaptures,
                    request_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.QueryStoredCapturesRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.SerializeToString,
            ),
            'QueryMaxCaptureId': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryMaxCaptureId,
                    request_deserializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.QueryMaxCaptureIdRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_data__acquisition__store__pb2.QueryMaxCaptureIdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.DataAcquisitionStoreService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataAcquisitionStoreService(object):
    """The DataAcquisitionStoreService is used to store data (images, data, metadata) on the robot
    in association with the DataIdentifiers specified by the DataAcquisitionService. Additionally,
    requests can be made to the DataAcquisitionStoreService to identify different pieces of data or
    entire capture actions which match query parameters, such as time ranges or action/group names.
    """

    @staticmethod
    def ListCaptureActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataAcquisitionStoreService/ListCaptureActions',
            bosdyn_dot_api_dot_data__acquisition__store__pb2.ListCaptureActionsRequest.SerializeToString,
            bosdyn_dot_api_dot_data__acquisition__store__pb2.ListCaptureActionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStoredData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataAcquisitionStoreService/ListStoredData',
            bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredDataRequest.SerializeToString,
            bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataAcquisitionStoreService/StoreData',
            bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreDataRequest.SerializeToString,
            bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreDataStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/bosdyn.api.DataAcquisitionStoreService/StoreDataStream',
            bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreStreamRequest.SerializeToString,
            bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStoredImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataAcquisitionStoreService/ListStoredImages',
            bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredImagesRequest.SerializeToString,
            bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredImagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataAcquisitionStoreService/StoreImage',
            bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreImageRequest.SerializeToString,
            bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStoredMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataAcquisitionStoreService/ListStoredMetadata',
            bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredMetadataRequest.SerializeToString,
            bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataAcquisitionStoreService/StoreMetadata',
            bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreMetadataRequest.SerializeToString,
            bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListStoredAlertData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataAcquisitionStoreService/ListStoredAlertData',
            bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredAlertDataRequest.SerializeToString,
            bosdyn_dot_api_dot_data__acquisition__store__pb2.ListStoredAlertDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreAlertData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataAcquisitionStoreService/StoreAlertData',
            bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreAlertDataRequest.SerializeToString,
            bosdyn_dot_api_dot_data__acquisition__store__pb2.StoreAlertDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryStoredCaptures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bosdyn.api.DataAcquisitionStoreService/QueryStoredCaptures',
            bosdyn_dot_api_dot_data__acquisition__store__pb2.QueryStoredCapturesRequest.SerializeToString,
            bosdyn_dot_api_dot_data__chunk__pb2.DataChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryMaxCaptureId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.DataAcquisitionStoreService/QueryMaxCaptureId',
            bosdyn_dot_api_dot_data__acquisition__store__pb2.QueryMaxCaptureIdRequest.SerializeToString,
            bosdyn_dot_api_dot_data__acquisition__store__pb2.QueryMaxCaptureIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
