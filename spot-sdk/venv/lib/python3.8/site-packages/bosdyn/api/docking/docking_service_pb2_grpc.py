# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api.docking import docking_pb2 as bosdyn_dot_api_dot_docking_dot_docking__pb2


class DockingServiceStub(object):
    """The DockingService provides an interface to dock and undock the robot from Spot Docks,
    as well as get feedback on command status, and get the current docked status of the robot.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DockingCommand = channel.unary_unary(
                '/bosdyn.api.docking.DockingService/DockingCommand',
                request_serializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.DockingCommandRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.DockingCommandResponse.FromString,
                )
        self.DockingCommandFeedback = channel.unary_unary(
                '/bosdyn.api.docking.DockingService/DockingCommandFeedback',
                request_serializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.DockingCommandFeedbackRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.DockingCommandFeedbackResponse.FromString,
                )
        self.GetDockingConfig = channel.unary_unary(
                '/bosdyn.api.docking.DockingService/GetDockingConfig',
                request_serializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.GetDockingConfigRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.GetDockingConfigResponse.FromString,
                )
        self.GetDockingState = channel.unary_unary(
                '/bosdyn.api.docking.DockingService/GetDockingState',
                request_serializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.GetDockingStateRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.GetDockingStateResponse.FromString,
                )


class DockingServiceServicer(object):
    """The DockingService provides an interface to dock and undock the robot from Spot Docks,
    as well as get feedback on command status, and get the current docked status of the robot.
    """

    def DockingCommand(self, request, context):
        """Starts a docking command on the robot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DockingCommandFeedback(self, request, context):
        """Check the status of a docking command.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDockingConfig(self, request, context):
        """Get the configured dock ID ranges.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDockingState(self, request, context):
        """Get the robot's docking state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DockingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DockingCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.DockingCommand,
                    request_deserializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.DockingCommandRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.DockingCommandResponse.SerializeToString,
            ),
            'DockingCommandFeedback': grpc.unary_unary_rpc_method_handler(
                    servicer.DockingCommandFeedback,
                    request_deserializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.DockingCommandFeedbackRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.DockingCommandFeedbackResponse.SerializeToString,
            ),
            'GetDockingConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDockingConfig,
                    request_deserializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.GetDockingConfigRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.GetDockingConfigResponse.SerializeToString,
            ),
            'GetDockingState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDockingState,
                    request_deserializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.GetDockingStateRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_docking_dot_docking__pb2.GetDockingStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.docking.DockingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DockingService(object):
    """The DockingService provides an interface to dock and undock the robot from Spot Docks,
    as well as get feedback on command status, and get the current docked status of the robot.
    """

    @staticmethod
    def DockingCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.docking.DockingService/DockingCommand',
            bosdyn_dot_api_dot_docking_dot_docking__pb2.DockingCommandRequest.SerializeToString,
            bosdyn_dot_api_dot_docking_dot_docking__pb2.DockingCommandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DockingCommandFeedback(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.docking.DockingService/DockingCommandFeedback',
            bosdyn_dot_api_dot_docking_dot_docking__pb2.DockingCommandFeedbackRequest.SerializeToString,
            bosdyn_dot_api_dot_docking_dot_docking__pb2.DockingCommandFeedbackResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDockingConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.docking.DockingService/GetDockingConfig',
            bosdyn_dot_api_dot_docking_dot_docking__pb2.GetDockingConfigRequest.SerializeToString,
            bosdyn_dot_api_dot_docking_dot_docking__pb2.GetDockingConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDockingState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.docking.DockingService/GetDockingState',
            bosdyn_dot_api_dot_docking_dot_docking__pb2.GetDockingStateRequest.SerializeToString,
            bosdyn_dot_api_dot_docking_dot_docking__pb2.GetDockingStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
