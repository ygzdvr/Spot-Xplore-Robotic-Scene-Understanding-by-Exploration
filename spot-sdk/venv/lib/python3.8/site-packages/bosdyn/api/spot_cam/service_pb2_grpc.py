# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api.spot_cam import LED_pb2 as bosdyn_dot_api_dot_spot__cam_dot_LED__pb2
from bosdyn.api.spot_cam import audio_pb2 as bosdyn_dot_api_dot_spot__cam_dot_audio__pb2
from bosdyn.api.spot_cam import compositor_pb2 as bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2
from bosdyn.api.spot_cam import health_pb2 as bosdyn_dot_api_dot_spot__cam_dot_health__pb2
from bosdyn.api.spot_cam import logging_pb2 as bosdyn_dot_api_dot_spot__cam_dot_logging__pb2
from bosdyn.api.spot_cam import network_pb2 as bosdyn_dot_api_dot_spot__cam_dot_network__pb2
from bosdyn.api.spot_cam import power_pb2 as bosdyn_dot_api_dot_spot__cam_dot_power__pb2
from bosdyn.api.spot_cam import ptz_pb2 as bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2
from bosdyn.api.spot_cam import streamquality_pb2 as bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2
from bosdyn.api.spot_cam import version_pb2 as bosdyn_dot_api_dot_spot__cam_dot_version__pb2


class CompositorServiceStub(object):
    """Change the layout of of the video stream between available presets.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetScreen = channel.unary_unary(
                '/bosdyn.api.spot_cam.CompositorService/SetScreen',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetScreenRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetScreenResponse.FromString,
                )
        self.GetScreen = channel.unary_unary(
                '/bosdyn.api.spot_cam.CompositorService/GetScreen',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetScreenRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetScreenResponse.FromString,
                )
        self.ListScreens = channel.unary_unary(
                '/bosdyn.api.spot_cam.CompositorService/ListScreens',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.ListScreensRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.ListScreensResponse.FromString,
                )
        self.GetVisibleCameras = channel.unary_unary(
                '/bosdyn.api.spot_cam.CompositorService/GetVisibleCameras',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetVisibleCamerasRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetVisibleCamerasResponse.FromString,
                )
        self.SetIrColormap = channel.unary_unary(
                '/bosdyn.api.spot_cam.CompositorService/SetIrColormap',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrColormapRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrColormapResponse.FromString,
                )
        self.GetIrColormap = channel.unary_unary(
                '/bosdyn.api.spot_cam.CompositorService/GetIrColormap',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrColormapRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrColormapResponse.FromString,
                )
        self.SetIrMeterOverlay = channel.unary_unary(
                '/bosdyn.api.spot_cam.CompositorService/SetIrMeterOverlay',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrMeterOverlayRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrMeterOverlayResponse.FromString,
                )
        self.GetIrMeterOverlay = channel.unary_unary(
                '/bosdyn.api.spot_cam.CompositorService/GetIrMeterOverlay',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrMeterOverlayRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrMeterOverlayResponse.FromString,
                )


class CompositorServiceServicer(object):
    """Change the layout of of the video stream between available presets.
    """

    def SetScreen(self, request, context):
        """SetScreen changes the current view that is streamed over the network
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetScreen(self, request, context):
        """GetScreen returns the currently-selected screen
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListScreens(self, request, context):
        """ListScreens returns a list of available screens
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVisibleCameras(self, request, context):
        """GetVisibleCameras returns a list of currently visible windows, with any available metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetIrColormap(self, request, context):
        """set the mapping between radiometric IR samples to color, for video
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIrColormap(self, request, context):
        """get the mapping between radiometric IR samples to color, for video
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetIrMeterOverlay(self, request, context):
        """apply settings for the 'ir meter overlay'
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIrMeterOverlay(self, request, context):
        """retrieve settings for the 'ir meter overlay'
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompositorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetScreen': grpc.unary_unary_rpc_method_handler(
                    servicer.SetScreen,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetScreenRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetScreenResponse.SerializeToString,
            ),
            'GetScreen': grpc.unary_unary_rpc_method_handler(
                    servicer.GetScreen,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetScreenRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetScreenResponse.SerializeToString,
            ),
            'ListScreens': grpc.unary_unary_rpc_method_handler(
                    servicer.ListScreens,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.ListScreensRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.ListScreensResponse.SerializeToString,
            ),
            'GetVisibleCameras': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVisibleCameras,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetVisibleCamerasRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetVisibleCamerasResponse.SerializeToString,
            ),
            'SetIrColormap': grpc.unary_unary_rpc_method_handler(
                    servicer.SetIrColormap,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrColormapRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrColormapResponse.SerializeToString,
            ),
            'GetIrColormap': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIrColormap,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrColormapRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrColormapResponse.SerializeToString,
            ),
            'SetIrMeterOverlay': grpc.unary_unary_rpc_method_handler(
                    servicer.SetIrMeterOverlay,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrMeterOverlayRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrMeterOverlayResponse.SerializeToString,
            ),
            'GetIrMeterOverlay': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIrMeterOverlay,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrMeterOverlayRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrMeterOverlayResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.spot_cam.CompositorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CompositorService(object):
    """Change the layout of of the video stream between available presets.
    """

    @staticmethod
    def SetScreen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.CompositorService/SetScreen',
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetScreenRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetScreenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetScreen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.CompositorService/GetScreen',
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetScreenRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetScreenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListScreens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.CompositorService/ListScreens',
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.ListScreensRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.ListScreensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVisibleCameras(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.CompositorService/GetVisibleCameras',
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetVisibleCamerasRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetVisibleCamerasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetIrColormap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.CompositorService/SetIrColormap',
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrColormapRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrColormapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIrColormap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.CompositorService/GetIrColormap',
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrColormapRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrColormapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetIrMeterOverlay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.CompositorService/SetIrMeterOverlay',
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrMeterOverlayRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.SetIrMeterOverlayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIrMeterOverlay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.CompositorService/GetIrMeterOverlay',
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrMeterOverlayRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_compositor__pb2.GetIrMeterOverlayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StreamQualityServiceStub(object):
    """Set quality parameters for the stream, such as compression and image postprocessing settings.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetStreamParams = channel.unary_unary(
                '/bosdyn.api.spot_cam.StreamQualityService/SetStreamParams',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.SetStreamParamsRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.SetStreamParamsResponse.FromString,
                )
        self.GetStreamParams = channel.unary_unary(
                '/bosdyn.api.spot_cam.StreamQualityService/GetStreamParams',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.GetStreamParamsRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.GetStreamParamsResponse.FromString,
                )
        self.EnableCongestionControl = channel.unary_unary(
                '/bosdyn.api.spot_cam.StreamQualityService/EnableCongestionControl',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.EnableCongestionControlRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.EnableCongestionControlResponse.FromString,
                )


class StreamQualityServiceServicer(object):
    """Set quality parameters for the stream, such as compression and image postprocessing settings.
    """

    def SetStreamParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStreamParams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableCongestionControl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamQualityServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetStreamParams': grpc.unary_unary_rpc_method_handler(
                    servicer.SetStreamParams,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.SetStreamParamsRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.SetStreamParamsResponse.SerializeToString,
            ),
            'GetStreamParams': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStreamParams,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.GetStreamParamsRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.GetStreamParamsResponse.SerializeToString,
            ),
            'EnableCongestionControl': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableCongestionControl,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.EnableCongestionControlRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.EnableCongestionControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.spot_cam.StreamQualityService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StreamQualityService(object):
    """Set quality parameters for the stream, such as compression and image postprocessing settings.
    """

    @staticmethod
    def SetStreamParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.StreamQualityService/SetStreamParams',
            bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.SetStreamParamsRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.SetStreamParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStreamParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.StreamQualityService/GetStreamParams',
            bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.GetStreamParamsRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.GetStreamParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableCongestionControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.StreamQualityService/EnableCongestionControl',
            bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.EnableCongestionControlRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_streamquality__pb2.EnableCongestionControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PowerServiceStub(object):
    """Turn hardware components' power on or off.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetPowerStatus = channel.unary_unary(
                '/bosdyn.api.spot_cam.PowerService/SetPowerStatus',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.SetPowerStatusRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.SetPowerStatusResponse.FromString,
                )
        self.GetPowerStatus = channel.unary_unary(
                '/bosdyn.api.spot_cam.PowerService/GetPowerStatus',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.GetPowerStatusRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.GetPowerStatusResponse.FromString,
                )
        self.CyclePower = channel.unary_unary(
                '/bosdyn.api.spot_cam.PowerService/CyclePower',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.CyclePowerRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.CyclePowerResponse.FromString,
                )


class PowerServiceServicer(object):
    """Turn hardware components' power on or off.
    """

    def SetPowerStatus(self, request, context):
        """Turn components' power on or off. This should not be used to power cycle a component
        Turning PTZ power off for too long will cause the video stream to fail
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPowerStatus(self, request, context):
        """Get current status of a component
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CyclePower(self, request, context):
        """Cycle power for a component
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PowerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetPowerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPowerStatus,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.SetPowerStatusRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.SetPowerStatusResponse.SerializeToString,
            ),
            'GetPowerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPowerStatus,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.GetPowerStatusRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.GetPowerStatusResponse.SerializeToString,
            ),
            'CyclePower': grpc.unary_unary_rpc_method_handler(
                    servicer.CyclePower,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.CyclePowerRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_power__pb2.CyclePowerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.spot_cam.PowerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PowerService(object):
    """Turn hardware components' power on or off.
    """

    @staticmethod
    def SetPowerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.PowerService/SetPowerStatus',
            bosdyn_dot_api_dot_spot__cam_dot_power__pb2.SetPowerStatusRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_power__pb2.SetPowerStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPowerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.PowerService/GetPowerStatus',
            bosdyn_dot_api_dot_spot__cam_dot_power__pb2.GetPowerStatusRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_power__pb2.GetPowerStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CyclePower(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.PowerService/CyclePower',
            bosdyn_dot_api_dot_spot__cam_dot_power__pb2.CyclePowerRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_power__pb2.CyclePowerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LightingServiceStub(object):
    """Change the brightness level of individual LEDs.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetLEDBrightness = channel.unary_unary(
                '/bosdyn.api.spot_cam.LightingService/SetLEDBrightness',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.SetLEDBrightnessRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.SetLEDBrightnessResponse.FromString,
                )
        self.GetLEDBrightness = channel.unary_unary(
                '/bosdyn.api.spot_cam.LightingService/GetLEDBrightness',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.GetLEDBrightnessRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.GetLEDBrightnessResponse.FromString,
                )


class LightingServiceServicer(object):
    """Change the brightness level of individual LEDs.
    """

    def SetLEDBrightness(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLEDBrightness(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LightingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetLEDBrightness': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLEDBrightness,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.SetLEDBrightnessRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.SetLEDBrightnessResponse.SerializeToString,
            ),
            'GetLEDBrightness': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLEDBrightness,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.GetLEDBrightnessRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.GetLEDBrightnessResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.spot_cam.LightingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LightingService(object):
    """Change the brightness level of individual LEDs.
    """

    @staticmethod
    def SetLEDBrightness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.LightingService/SetLEDBrightness',
            bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.SetLEDBrightnessRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.SetLEDBrightnessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLEDBrightness(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.LightingService/GetLEDBrightness',
            bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.GetLEDBrightnessRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_LED__pb2.GetLEDBrightnessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MediaLogServiceStub(object):
    """Trigger data acquisitions, and retrieve resulting data.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Store = channel.unary_unary(
                '/bosdyn.api.spot_cam.MediaLogService/Store',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.StoreRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.StoreResponse.FromString,
                )
        self.GetStatus = channel.unary_unary(
                '/bosdyn.api.spot_cam.MediaLogService/GetStatus',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.GetStatusRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.GetStatusResponse.FromString,
                )
        self.Tag = channel.unary_unary(
                '/bosdyn.api.spot_cam.MediaLogService/Tag',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.TagRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.TagResponse.FromString,
                )
        self.EnableDebug = channel.unary_unary(
                '/bosdyn.api.spot_cam.MediaLogService/EnableDebug',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DebugRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DebugResponse.FromString,
                )
        self.ListCameras = channel.unary_unary(
                '/bosdyn.api.spot_cam.MediaLogService/ListCameras',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListCamerasRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListCamerasResponse.FromString,
                )
        self.RetrieveRawData = channel.unary_stream(
                '/bosdyn.api.spot_cam.MediaLogService/RetrieveRawData',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRawDataRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRawDataResponse.FromString,
                )
        self.Retrieve = channel.unary_stream(
                '/bosdyn.api.spot_cam.MediaLogService/Retrieve',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/bosdyn.api.spot_cam.MediaLogService/Delete',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DeleteRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DeleteResponse.FromString,
                )
        self.ListLogpoints = channel.unary_stream(
                '/bosdyn.api.spot_cam.MediaLogService/ListLogpoints',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListLogpointsRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListLogpointsResponse.FromString,
                )
        self.SetPassphrase = channel.unary_unary(
                '/bosdyn.api.spot_cam.MediaLogService/SetPassphrase',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.SetPassphraseRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.SetPassphraseResponse.FromString,
                )


class MediaLogServiceServicer(object):
    """Trigger data acquisitions, and retrieve resulting data.
    """

    def Store(self, request, context):
        """Store queues up a Logpoint, which is a bit of media that the user wishes to store to disk
        (still images are supported for now, more media types will be supported in the future)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """GetStatus reads the 'name' field of the Logpoint contained in GetStatusRequest, and fills in
        the rest of the fields. Mainly useful for getting the 'state' of the logpoint.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Tag(self, request, context):
        """Tag updates the 'tag' field of the Logpoint that's passed, which must exist.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableDebug(self, request, context):
        """EnableDebug starts the periodic logging of health data to the database; this increases disk
        utilization, but will record data that is useful post-mortem
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCameras(self, request, context):
        """ListCameras returns a list of strings that identify valid cameras for logging
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveRawData(self, request, context):
        """Retrieve returns all raw data associated with a given logpoint
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Retrieve(self, request, context):
        """Retrieve returns all data associated with a given logpoint
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Delete removes a Logpoint from the system
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLogpoints(self, request, context):
        """ListLogpoints returns a list of all logpoints in the database.
        Warning: this may be a lot of data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPassphrase(self, request, context):
        """SetPassphrase sets the eCryptFS passphrase used by the filesystem.
        there is no symmetry here, because key material is write-only
        This rpc is now deprecated as of the switch from EXT4 to NTFS and returns UnimplementedError
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MediaLogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Store': grpc.unary_unary_rpc_method_handler(
                    servicer.Store,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.StoreRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.StoreResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.GetStatusRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.GetStatusResponse.SerializeToString,
            ),
            'Tag': grpc.unary_unary_rpc_method_handler(
                    servicer.Tag,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.TagRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.TagResponse.SerializeToString,
            ),
            'EnableDebug': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableDebug,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DebugRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DebugResponse.SerializeToString,
            ),
            'ListCameras': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCameras,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListCamerasRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListCamerasResponse.SerializeToString,
            ),
            'RetrieveRawData': grpc.unary_stream_rpc_method_handler(
                    servicer.RetrieveRawData,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRawDataRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRawDataResponse.SerializeToString,
            ),
            'Retrieve': grpc.unary_stream_rpc_method_handler(
                    servicer.Retrieve,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DeleteRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DeleteResponse.SerializeToString,
            ),
            'ListLogpoints': grpc.unary_stream_rpc_method_handler(
                    servicer.ListLogpoints,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListLogpointsRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListLogpointsResponse.SerializeToString,
            ),
            'SetPassphrase': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPassphrase,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.SetPassphraseRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.SetPassphraseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.spot_cam.MediaLogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MediaLogService(object):
    """Trigger data acquisitions, and retrieve resulting data.
    """

    @staticmethod
    def Store(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.MediaLogService/Store',
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.StoreRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.StoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.MediaLogService/GetStatus',
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.GetStatusRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.GetStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Tag(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.MediaLogService/Tag',
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.TagRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.TagResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableDebug(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.MediaLogService/EnableDebug',
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DebugRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DebugResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCameras(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.MediaLogService/ListCameras',
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListCamerasRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListCamerasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveRawData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bosdyn.api.spot_cam.MediaLogService/RetrieveRawData',
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRawDataRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRawDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Retrieve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bosdyn.api.spot_cam.MediaLogService/Retrieve',
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.RetrieveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.MediaLogService/Delete',
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DeleteRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLogpoints(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bosdyn.api.spot_cam.MediaLogService/ListLogpoints',
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListLogpointsRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.ListLogpointsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPassphrase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.MediaLogService/SetPassphrase',
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.SetPassphraseRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_logging__pb2.SetPassphraseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PtzServiceStub(object):
    """Control real and virtual ptz mechanisms.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetPtzPosition = channel.unary_unary(
                '/bosdyn.api.spot_cam.PtzService/SetPtzPosition',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzPositionRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzPositionResponse.FromString,
                )
        self.GetPtzPosition = channel.unary_unary(
                '/bosdyn.api.spot_cam.PtzService/GetPtzPosition',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzPositionRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzPositionResponse.FromString,
                )
        self.SetPtzVelocity = channel.unary_unary(
                '/bosdyn.api.spot_cam.PtzService/SetPtzVelocity',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzVelocityRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzVelocityResponse.FromString,
                )
        self.GetPtzVelocity = channel.unary_unary(
                '/bosdyn.api.spot_cam.PtzService/GetPtzVelocity',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzVelocityRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzVelocityResponse.FromString,
                )
        self.ListPtz = channel.unary_unary(
                '/bosdyn.api.spot_cam.PtzService/ListPtz',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.ListPtzRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.ListPtzResponse.FromString,
                )
        self.InitializeLens = channel.unary_unary(
                '/bosdyn.api.spot_cam.PtzService/InitializeLens',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.InitializeLensRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.InitializeLensResponse.FromString,
                )
        self.SetPtzFocusState = channel.unary_unary(
                '/bosdyn.api.spot_cam.PtzService/SetPtzFocusState',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzFocusStateRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzFocusStateResponse.FromString,
                )
        self.GetPtzFocusState = channel.unary_unary(
                '/bosdyn.api.spot_cam.PtzService/GetPtzFocusState',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzFocusStateRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzFocusStateResponse.FromString,
                )


class PtzServiceServicer(object):
    """Control real and virtual ptz mechanisms.
    """

    def SetPtzPosition(self, request, context):
        """SetPosition points the referenced camera to a given vector (in PTZ-space)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPtzPosition(self, request, context):
        """GetPosition returns the current settings of the referenced camera
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPtzVelocity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPtzVelocity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPtz(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializeLens(self, request, context):
        """Reinitializes PTZ autofocus
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPtzFocusState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPtzFocusState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PtzServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetPtzPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPtzPosition,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzPositionRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzPositionResponse.SerializeToString,
            ),
            'GetPtzPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPtzPosition,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzPositionRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzPositionResponse.SerializeToString,
            ),
            'SetPtzVelocity': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPtzVelocity,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzVelocityRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzVelocityResponse.SerializeToString,
            ),
            'GetPtzVelocity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPtzVelocity,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzVelocityRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzVelocityResponse.SerializeToString,
            ),
            'ListPtz': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPtz,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.ListPtzRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.ListPtzResponse.SerializeToString,
            ),
            'InitializeLens': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeLens,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.InitializeLensRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.InitializeLensResponse.SerializeToString,
            ),
            'SetPtzFocusState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPtzFocusState,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzFocusStateRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzFocusStateResponse.SerializeToString,
            ),
            'GetPtzFocusState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPtzFocusState,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzFocusStateRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzFocusStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.spot_cam.PtzService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PtzService(object):
    """Control real and virtual ptz mechanisms.
    """

    @staticmethod
    def SetPtzPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.PtzService/SetPtzPosition',
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzPositionRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzPositionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPtzPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.PtzService/GetPtzPosition',
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzPositionRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzPositionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPtzVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.PtzService/SetPtzVelocity',
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzVelocityRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzVelocityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPtzVelocity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.PtzService/GetPtzVelocity',
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzVelocityRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzVelocityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPtz(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.PtzService/ListPtz',
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.ListPtzRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.ListPtzResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitializeLens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.PtzService/InitializeLens',
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.InitializeLensRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.InitializeLensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPtzFocusState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.PtzService/SetPtzFocusState',
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzFocusStateRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.SetPtzFocusStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPtzFocusState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.PtzService/GetPtzFocusState',
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzFocusStateRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_ptz__pb2.GetPtzFocusStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AudioServiceStub(object):
    """Upload and play sounds over the SpotCam's speakers.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PlaySound = channel.unary_unary(
                '/bosdyn.api.spot_cam.AudioService/PlaySound',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.PlaySoundRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.PlaySoundResponse.FromString,
                )
        self.LoadSound = channel.stream_unary(
                '/bosdyn.api.spot_cam.AudioService/LoadSound',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.LoadSoundRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.LoadSoundResponse.FromString,
                )
        self.DeleteSound = channel.unary_unary(
                '/bosdyn.api.spot_cam.AudioService/DeleteSound',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.DeleteSoundRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.DeleteSoundResponse.FromString,
                )
        self.ListSounds = channel.unary_unary(
                '/bosdyn.api.spot_cam.AudioService/ListSounds',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.ListSoundsRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.ListSoundsResponse.FromString,
                )
        self.SetVolume = channel.unary_unary(
                '/bosdyn.api.spot_cam.AudioService/SetVolume',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetVolumeRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetVolumeResponse.FromString,
                )
        self.GetVolume = channel.unary_unary(
                '/bosdyn.api.spot_cam.AudioService/GetVolume',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetVolumeRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetVolumeResponse.FromString,
                )
        self.SetAudioCaptureChannel = channel.unary_unary(
                '/bosdyn.api.spot_cam.AudioService/SetAudioCaptureChannel',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureChannelRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureChannelResponse.FromString,
                )
        self.GetAudioCaptureChannel = channel.unary_unary(
                '/bosdyn.api.spot_cam.AudioService/GetAudioCaptureChannel',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureChannelRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureChannelResponse.FromString,
                )
        self.SetAudioCaptureGain = channel.unary_unary(
                '/bosdyn.api.spot_cam.AudioService/SetAudioCaptureGain',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureGainRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureGainResponse.FromString,
                )
        self.GetAudioCaptureGain = channel.unary_unary(
                '/bosdyn.api.spot_cam.AudioService/GetAudioCaptureGain',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureGainRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureGainResponse.FromString,
                )


class AudioServiceServicer(object):
    """Upload and play sounds over the SpotCam's speakers.
    """

    def PlaySound(self, request, context):
        """Given a soundRequest that identifies a single sound present in the system's sound effects
        table, PlaySound executes the sound effect.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadSound(self, request_iterator, context):
        """LoadSound loads a sound effect into the system's sound table. The stream must contain a wav
        file, with a RIFF header describing it. The argument is a stream, to allow for sounds that
        are bigger then the MTU of the network; in this case, the complete stream must contain the
        entire sound. If the stream ends early, an error will be returned. The header and sound
        fields of the entire stream must be the same.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSound(self, request, context):
        """Delete the sound identified in the argument from the system's sound table.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSounds(self, request, context):
        """ListSounds returns a list of all of the sound effects that the system knows about.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVolume(self, request, context):
        """Set the overall volume level for playing sounds.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVolume(self, request, context):
        """Set the overall volume level for playing sounds.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAudioCaptureChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAudioCaptureChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAudioCaptureGain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAudioCaptureGain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AudioServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PlaySound': grpc.unary_unary_rpc_method_handler(
                    servicer.PlaySound,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.PlaySoundRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.PlaySoundResponse.SerializeToString,
            ),
            'LoadSound': grpc.stream_unary_rpc_method_handler(
                    servicer.LoadSound,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.LoadSoundRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.LoadSoundResponse.SerializeToString,
            ),
            'DeleteSound': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSound,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.DeleteSoundRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.DeleteSoundResponse.SerializeToString,
            ),
            'ListSounds': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSounds,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.ListSoundsRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.ListSoundsResponse.SerializeToString,
            ),
            'SetVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.SetVolume,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetVolumeRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetVolumeResponse.SerializeToString,
            ),
            'GetVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVolume,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetVolumeRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetVolumeResponse.SerializeToString,
            ),
            'SetAudioCaptureChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAudioCaptureChannel,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureChannelRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureChannelResponse.SerializeToString,
            ),
            'GetAudioCaptureChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAudioCaptureChannel,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureChannelRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureChannelResponse.SerializeToString,
            ),
            'SetAudioCaptureGain': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAudioCaptureGain,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureGainRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureGainResponse.SerializeToString,
            ),
            'GetAudioCaptureGain': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAudioCaptureGain,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureGainRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureGainResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.spot_cam.AudioService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AudioService(object):
    """Upload and play sounds over the SpotCam's speakers.
    """

    @staticmethod
    def PlaySound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.AudioService/PlaySound',
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.PlaySoundRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.PlaySoundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadSound(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/bosdyn.api.spot_cam.AudioService/LoadSound',
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.LoadSoundRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.LoadSoundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.AudioService/DeleteSound',
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.DeleteSoundRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.DeleteSoundResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSounds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.AudioService/ListSounds',
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.ListSoundsRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.ListSoundsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.AudioService/SetVolume',
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetVolumeRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetVolumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.AudioService/GetVolume',
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetVolumeRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetVolumeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAudioCaptureChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.AudioService/SetAudioCaptureChannel',
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureChannelRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAudioCaptureChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.AudioService/GetAudioCaptureChannel',
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureChannelRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAudioCaptureGain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.AudioService/SetAudioCaptureGain',
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureGainRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.SetAudioCaptureGainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAudioCaptureGain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.AudioService/GetAudioCaptureGain',
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureGainRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_audio__pb2.GetAudioCaptureGainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HealthServiceStub(object):
    """Query temperature and built-in test results.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTemperature = channel.unary_unary(
                '/bosdyn.api.spot_cam.HealthService/GetTemperature',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetTemperatureRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetTemperatureResponse.FromString,
                )
        self.GetBITStatus = channel.unary_unary(
                '/bosdyn.api.spot_cam.HealthService/GetBITStatus',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetBITStatusRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetBITStatusResponse.FromString,
                )
        self.ClearBITEvents = channel.unary_unary(
                '/bosdyn.api.spot_cam.HealthService/ClearBITEvents',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.ClearBITEventsRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.ClearBITEventsResponse.FromString,
                )
        self.GetSystemLog = channel.unary_stream(
                '/bosdyn.api.spot_cam.HealthService/GetSystemLog',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetSystemLogRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetSystemLogResponse.FromString,
                )


class HealthServiceServicer(object):
    """Query temperature and built-in test results.
    """

    def GetTemperature(self, request, context):
        """GetTemperature returns a list of thermometers in the system, and the temperature that they
        measure.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBITStatus(self, request, context):
        """GetBitStatus returns two lists; a list of system events, and a list of ways that the system
        is degraded; for instance, a degradation may include a missing PTZ unit, or a missing USB
        storage device.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearBITEvents(self, request, context):
        """ClearBitEvents clears out the events list of the BITStatus structure.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSystemLog(self, request, context):
        """GetSystemLog retrieves an encrypted log of system events, for factory diagnosis of possible
        issues. The data streamed back should be concatenated to a single file, before sending to the
        manufacturer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTemperature': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTemperature,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetTemperatureRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetTemperatureResponse.SerializeToString,
            ),
            'GetBITStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBITStatus,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetBITStatusRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetBITStatusResponse.SerializeToString,
            ),
            'ClearBITEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearBITEvents,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.ClearBITEventsRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.ClearBITEventsResponse.SerializeToString,
            ),
            'GetSystemLog': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSystemLog,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetSystemLogRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetSystemLogResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.spot_cam.HealthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HealthService(object):
    """Query temperature and built-in test results.
    """

    @staticmethod
    def GetTemperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.HealthService/GetTemperature',
            bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetTemperatureRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetTemperatureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBITStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.HealthService/GetBITStatus',
            bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetBITStatusRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetBITStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearBITEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.HealthService/ClearBITEvents',
            bosdyn_dot_api_dot_spot__cam_dot_health__pb2.ClearBITEventsRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_health__pb2.ClearBITEventsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSystemLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/bosdyn.api.spot_cam.HealthService/GetSystemLog',
            bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetSystemLogRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_health__pb2.GetSystemLogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class NetworkServiceStub(object):
    """Modify or query network settings of the SpotCam and ICE resolution servers.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetICEConfiguration = channel.unary_unary(
                '/bosdyn.api.spot_cam.NetworkService/SetICEConfiguration',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.SetICEConfigurationRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.SetICEConfigurationResponse.FromString,
                )
        self.GetICEConfiguration = channel.unary_unary(
                '/bosdyn.api.spot_cam.NetworkService/GetICEConfiguration',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.GetICEConfigurationRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.GetICEConfigurationResponse.FromString,
                )


class NetworkServiceServicer(object):
    """Modify or query network settings of the SpotCam and ICE resolution servers.
    """

    def SetICEConfiguration(self, request, context):
        """SetICEConfiguration sets up parameters for ICE, including addresses for STUN and TURN
        services
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetICEConfiguration(self, request, context):
        """GetICEConfiguration retrieves currently set parameters for ICE, including addresses for STUN
        and TURN services
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NetworkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetICEConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.SetICEConfiguration,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.SetICEConfigurationRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.SetICEConfigurationResponse.SerializeToString,
            ),
            'GetICEConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetICEConfiguration,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.GetICEConfigurationRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_network__pb2.GetICEConfigurationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.spot_cam.NetworkService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NetworkService(object):
    """Modify or query network settings of the SpotCam and ICE resolution servers.
    """

    @staticmethod
    def SetICEConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.NetworkService/SetICEConfiguration',
            bosdyn_dot_api_dot_spot__cam_dot_network__pb2.SetICEConfigurationRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_network__pb2.SetICEConfigurationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetICEConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.NetworkService/GetICEConfiguration',
            bosdyn_dot_api_dot_spot__cam_dot_network__pb2.GetICEConfigurationRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_network__pb2.GetICEConfigurationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class VersionServiceStub(object):
    """Query the version of the software release running on the SpotCam.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSoftwareVersion = channel.unary_unary(
                '/bosdyn.api.spot_cam.VersionService/GetSoftwareVersion',
                request_serializer=bosdyn_dot_api_dot_spot__cam_dot_version__pb2.GetSoftwareVersionRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_spot__cam_dot_version__pb2.GetSoftwareVersionResponse.FromString,
                )


class VersionServiceServicer(object):
    """Query the version of the software release running on the SpotCam.
    """

    def GetSoftwareVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VersionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSoftwareVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSoftwareVersion,
                    request_deserializer=bosdyn_dot_api_dot_spot__cam_dot_version__pb2.GetSoftwareVersionRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_spot__cam_dot_version__pb2.GetSoftwareVersionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.spot_cam.VersionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VersionService(object):
    """Query the version of the software release running on the SpotCam.
    """

    @staticmethod
    def GetSoftwareVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.spot_cam.VersionService/GetSoftwareVersion',
            bosdyn_dot_api_dot_spot__cam_dot_version__pb2.GetSoftwareVersionRequest.SerializeToString,
            bosdyn_dot_api_dot_spot__cam_dot_version__pb2.GetSoftwareVersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
