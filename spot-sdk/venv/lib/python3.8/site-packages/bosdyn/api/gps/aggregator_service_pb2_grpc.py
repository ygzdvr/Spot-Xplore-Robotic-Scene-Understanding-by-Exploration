# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bosdyn.api.gps import aggregator_pb2 as bosdyn_dot_api_dot_gps_dot_aggregator__pb2


class AggregatorServiceStub(object):
    """
    The AggregatorService is an endpoint that clients should send GPS data too.
    Data dumped into the AggregatorService is used by the RegistrationService.
    In practice:
    - A GPS will be connected to a peripheral computer
    - The peripheral computer should establish timesync with the robot
    - The peripheral computer should read data from the GPS hardware
    - The peripheral computer should send timestamped data to the AggregatorService
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NewGpsData = channel.unary_unary(
                '/bosdyn.api.gps.AggregatorService/NewGpsData',
                request_serializer=bosdyn_dot_api_dot_gps_dot_aggregator__pb2.NewGpsDataRequest.SerializeToString,
                response_deserializer=bosdyn_dot_api_dot_gps_dot_aggregator__pb2.NewGpsDataResponse.FromString,
                )


class AggregatorServiceServicer(object):
    """
    The AggregatorService is an endpoint that clients should send GPS data too.
    Data dumped into the AggregatorService is used by the RegistrationService.
    In practice:
    - A GPS will be connected to a peripheral computer
    - The peripheral computer should establish timesync with the robot
    - The peripheral computer should read data from the GPS hardware
    - The peripheral computer should send timestamped data to the AggregatorService
    """

    def NewGpsData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AggregatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NewGpsData': grpc.unary_unary_rpc_method_handler(
                    servicer.NewGpsData,
                    request_deserializer=bosdyn_dot_api_dot_gps_dot_aggregator__pb2.NewGpsDataRequest.FromString,
                    response_serializer=bosdyn_dot_api_dot_gps_dot_aggregator__pb2.NewGpsDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bosdyn.api.gps.AggregatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AggregatorService(object):
    """
    The AggregatorService is an endpoint that clients should send GPS data too.
    Data dumped into the AggregatorService is used by the RegistrationService.
    In practice:
    - A GPS will be connected to a peripheral computer
    - The peripheral computer should establish timesync with the robot
    - The peripheral computer should read data from the GPS hardware
    - The peripheral computer should send timestamped data to the AggregatorService
    """

    @staticmethod
    def NewGpsData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bosdyn.api.gps.AggregatorService/NewGpsData',
            bosdyn_dot_api_dot_gps_dot_aggregator__pb2.NewGpsDataRequest.SerializeToString,
            bosdyn_dot_api_dot_gps_dot_aggregator__pb2.NewGpsDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
